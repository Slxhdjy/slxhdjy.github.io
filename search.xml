<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>动态规划之01背包问题</title>
      <link href="/posts/173e.html"/>
      <url>/posts/173e.html</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong><br>给定N个物品和一个背包，背包的容量为W， 假设背包容量范围在[0，15]，第i个物品对应的体积和价值分别为W[i]和v[i]。各种物品的价值和重量如下：<br>     物品编号   1   2   3   4   5<br>      重量W     3   4   7   8   9<br>      价值V     4   5   10  11  13</p><p><strong>解题思路</strong><br>动态规划原理：是一种将问题实例分解为更小的、相似的子问题，并存储子问题的解而避免计算重复的子问题，以解决最优化问题的算法方法。0/1背包问题可以看作是决策一个序列（x1,x2,x3,x4,….xn）,对任一变量xi的决策是决定xi=1，还是xi=0。在对xi-1决策后，已确定了（x1,x2,x3,x4,….xi-1），在决策xi时，问题处于两种状态之一：<br>背包容量不足以装入物品i，则xi=0，背包不增加价值；<br>背包容量可以装入物品i，则xi=1，背包价值增加了 vi；<br>   这两种情况下背包价值的最大者应该是对xi决策后的背包价值。<br>    令v（i，j）表示装载前i种物品，总重量不超过j时背包的最大价值<br>    面对当前商品有两种可能性：<br>  包的容量比该商品体积小，装不下，此时的价值与前i-1个的价值是一样的，即V(i,j)=V(i-1,j)；<br>还有足够的容量可以装该商品，但装了也不一定达到当前最优价值，所以在装与不装之间选择最优的一个，即V(i,j)=max｛V(i-1,j)，V(i-1,j-w(i))+v(i)｝。<br>其中V(i-1,j)表示不装，V(i-1,j-w(i))+v(i) 表示装了第i个商品，背包容量减少w(i)，但价值增加了v(i)；</p><p>由此可以得出递推关系式：<br>j&lt;w(i)      V(i,j)=V(i-1,j)<br>j&gt;=w(i)     V(i,j)=max｛V(i-1,j)，V(i-1,j-w(i))+v(i)｝</p><p>根据递推公式,可以逐步求出当物品数为 i ,背包容量为 j 时的背包最大总价值，<br>但在求解之前，要将边界初始化<br>显然的 v(0,j)=0，v(i,0)=0</p><p><strong>构造最优解</strong><br>通过上面的方法可以求出背包问题的最优解，但还不知道这个最优解由哪些商品组成，可以通过最优解回溯找出解的组成：</p><p>我们可以声明一个长度为6的数组content[6]来标记物品是否选取，content[1]~content[5]分别对应物品1到物品5，将数组初始化为0，<br>1表示选取该物品，0表示不选取<br>V(i,j)=V(i-1,j) 或者  j - w[i] &lt;0 时，说明没有选择第i 个商品，则回到V(i-1,j)；<br>否则即说明装了第i个商品，该商品是最优解组成的一部分，content[i]=1，然后回到V(i-1,j-w(i))；<br>一直遍历到i＝0结束为止,我们能找到所有解的组成</p><p>(ps:对我来说,单纯看理论概念很容易烦躁而且很难理解，通过源代码结合概念能够有更清晰的认识）</p><p><strong>源代码</strong>：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*本关任务：给定N个物品和一个背包，背包的容量为W， 假设背包容量范围在[0，15]，第i个物品对应的体积和价值分别为W[i]和v[i]。各种物品的价值和重量如下：     物品编号   1   2   3   4   5      重量W    3   4   7   8   9      价值V    4   5   10  11  13求: 如何选择装入背包的物品，使得装入背包的物品的总价值为最大.*/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> content<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//最优解的物品组成</span><span class="token keyword">int</span> w<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//物品对应的重量</span><span class="token keyword">int</span> v<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">}</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//物品对应的价值</span><span class="token keyword">int</span> bV<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">//背包的最大容量为15</span><span class="token keyword">int</span> maxVal<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//存放当物品数为i,背包容量为j的最大总价值</span><span class="token keyword">void</span> <span class="token function">findContent</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//找到最优解的物品组成</span><span class="token keyword">void</span> <span class="token function">findMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//寻找当物品数为i,背包容量为j时的最大总价值</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//打印最优解物品组成</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"当物品数为i,背包容量为j时的能装入背包的最大总价值\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">findMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//打印当物品数为i,背包容量为j时的最大总价值</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%2d  "</span><span class="token punctuation">,</span>maxVal<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入当前的物品数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入当前背包的最大容量: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">findContent</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"最优解的物品组成为： \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>content<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"价值为 %d ,重量为 %d 的 %d 号物品\n"</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"物品数为%d 背包容量为 %d时的最大总价值为 %d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>maxVal<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span>  <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">findMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//寻找当物品数为i,背包容量为j时的最大总价值</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//如果背包容量小于物品i重量，表示背包存放不下第i种物品,此时的最大总价值为i-1种物品的最大总价值</span>                maxVal<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> maxVal<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>maxVal<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span>maxVal<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//放下第i种物品时的总价值为第i种物品的价值加上当物品数为i-1背包容量为j-w[i]的最优解</span>            maxVal<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>maxVal<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 对比当放下第i种物品时的总价值和物品数位i-1时的总价值，取最大值</span>        <span class="token keyword">else</span>            maxVal<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>maxVal<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">findContent</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//最优解组成</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxVal<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> maxVal<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">||</span> j <span class="token operator">-</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            content<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token function">findContent</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>         <span class="token punctuation">{</span>            content<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">findContent</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行结果</strong><br><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20200425095631713.png?" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Linux用C语言实现TCP半双工通信和UDP半双工通信</title>
      <link href="/posts/9589.html"/>
      <url>/posts/9589.html</url>
      
        <content type="html"><![CDATA[<h2 id="TCP协议-UDP协议介绍"><a href="#TCP协议-UDP协议介绍" class="headerlink" title="TCP协议/UDP协议介绍"></a>TCP协议/UDP协议介绍</h2><ul><li>TCP/IP（Transmission Control Protocol/Internet Protocol，传输控制协议/网际协议）是指能够在多个不同网络间实现信息传输的协议簇。TCP/IP协议不仅仅指的是TCP 和IP两个协议，而是指一个由FTP、SMTP、TCP、UDP、IP等协议构成的协议簇， 只是因为在TCP/IP协议中TCP协议和IP协议最具代表性，所以被称为TCP/IP协议</li><li>下面我们来简要了解TCP/IP的四层模型:<br>网络接口层：负责将二进制流转换为数据帧，并进行数据帧的发送和接收。数据帧是网络信息传输的基本单元,ARP和RARP协议<br>网络层：负责将数据帧封装成IP数据报，同时负责选择数据报的路径，即路由，IP和ICMP协议<br>传输层：负责端到端之间的通信会话连接与建立，传输协议的选择根据数据传输方式而定,UDP和TCP协议<br>应用层：负责应用程序的网络访问，这里通过端口号来识别各个不同的进程，FTP、TELNET、DNS、SMTP、POP3 协议</li></ul><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20200422164251742.png?" alt=""></p><ul><li><p>Internet 的传输层有两个主要协议，互为补充。无连接的是 UDP，它除了给应用程序发送数据包功能并允许它们在所需的层次上架构自己的协议之外，几乎没有做什么特别的事情。面向连接的是 TCP，该协议几乎做了所有的事情。</p></li><li><p><strong>传输控制协议(TCP，Transmission Control Protocol)</strong> 是为了在不可靠的互联网络上提供可靠的端到端字节流而专门设计的一个传输协议。TCP是因特网中的传输层协议，使用三次握手协议建立连接。当主动方发出SYN连接请求后，等待对方回答SYN+ACK，并最终对对方的 SYN 执行 ACK 确认。这种建立连接的方法可以防止产生错误的连接，TCP使用的流量控制协议是可变大小的滑动窗口协议。</p><p><strong>TCP三次握手过程</strong><br>第一次握手：主机A通过向主机B 发送一个含有同步序列号的标志位的数据段给主机B，向主机B 请求建立连接，通过这个数据段， 主机A告诉主机B 两件事：我想要和你通信；你可以用哪个序列号作为起始数据段来回应我。<br>第二次握手：主机B 收到主机A的请求后，用一个带有确认应答（ACK）和同步序列号（SYN）标志位的数据段响应主机A，也告诉主机A两件事：我已经收到你的请求了，你可以传输数据了；你要用那个序列号作为起始数据段来回应我<br>第三次握手：主机A收到这个数据段后，再发送一个确认应答，确认已收到主机B 的数据段：”我已收到回复，我现在要开始传输实际数据了，这样3次握手就完成了，主机A和主机B 就可以传输数据了。</p><p><strong>TCP建立连接要进行3次握手，而断开连接要进行4次</strong><br>第一次： 当主机A完成数据传输后,将控制位FIN置1，提出停止TCP连接的请求 ；<br>第二次： 主机B收到FIN后对其作出响应，确认这一方向上的TCP连接将关闭,将ACK置1；<br>第三次： 由B 端再提出反方向的关闭请求,将FIN置1 ；<br>第四次： 主机A对主机B的请求进行确认，将ACK置1，双方向的关闭结束.。<br>由TCP的三次握手和四次断开可以看出，TCP使用面向连接的通信方式， 大大提高了数据通信的可靠性，使发送数据端和接收端在数据正式传输前就有了交互， 为数据正式传输打下了可靠的基础。</p></li><li><p><strong>UDP(User Datagram Protocol)</strong> 全称是用户数据报协议,是一种非面向连接的协议,这种协议并不能保证我们的网络程序的连接是可靠的，而TCP是面向连接的，提供可靠的字节流。然而，有些情况下更适合用UDP而不是TCP。有些流行的应用程序是用UDP实现的：DNS（域名系统）、NFS（网络文件系统）和SNMP（简单网络管理协议）就是这样的例子。<br>1.UDP是一个非连接的协议，传输数据之前源端和终端不建立连接， 当它想传送时就简单地去抓取来自应用程序的数据，并尽可能快地把它扔到网络上。 在发送端，UDP传送数据的速度仅仅是受应用程序生成数据的速度、 计算机的能力和传输带宽的限制； 在接收端，UDP把每个消息段放在队列中，应用程序每次从队列中读一个消息段。</p><p>2.由于传输数据不建立连接，因此也就不需要维护连接状态，包括收发状态等， 因此一台服务机可同时向多个客户机传输相同的消息。</p><p>3.UDP信息包的标题很短，只有8个字节，相对于TCP的20个字节信息包的额外开销很小。</p><p>4.吞吐量不受拥挤控制算法的调节，只受应用软件生成数据的速率、传输带宽、 源端和终端主机性能的限制。</p><p>5.UDP使用尽最大努力交付，即不保证可靠交付， 因此主机不需要维持复杂的链接状态表（这里面有许多参数）。</p><p>6.UDP是面向报文的。发送方的UDP对应用程序交下来的报文， 在添加首部后就向下交付给IP层。既不拆分，也不合并，而是保留这些报文的边界， 因此，应用程序需要选择合适的报文大小。</p><p>我们经常使用“ping”命令来测试两台主机之间TCP/IP通信是否正常， 其实“ping”命令的原理就是向对方主机发送UDP数据包，然后对方主机确认收到数据包， 如果数据包是否到达的消息及时反馈回来，那么网络就是通的。</p></li><li><p><strong>小结TCP与UDP的区别：</strong></p><p>1、基于连接与无连接；</p><p>2、对系统资源的要求（TCP较多，UDP少）；</p><p>3、UDP程序结构较简单；</p><p>4、流模式与数据报模式 ；</p><p>5、TCP保证数据正确性，UDP可能丢包；</p><p>6、TCP保证数据顺序，UDP不保证。 ## 三种通信方式</p></li></ul><hr><h2 id="三种通信方式"><a href="#三种通信方式" class="headerlink" title="三种通信方式"></a>三种通信方式</h2><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20200423132800473.png?" alt=""></p><p> 1、单向通信：又称为单工通信，即只能有一个方向的通信而没有反方向的交互。无线电广播或有线电广播以及电视广播就属于这种类型。<br>单向通信只需要一条信道，而双向交替通信或双向同时通信则都需要两条信道（每个方向各一条）。显然，双向同时通信的传输效率最高。不过应当指出，虽然电信局为打电话的用户提供了双向同时通信的信道，但有效的电话交谈一般都还是双方交替通信。当双方发生争吵时往往就是采用双向同时通信的方式。</p><p>2、半双工通信，是指数据可以沿两个方向传送．但同一时刻一个信道只允许单方向传送，因此义被称为双向交替通信。例如，无线对讲机就是一种半双工设备，在同一时间内只允许一方讲话。</p><p>3、全双工通信，是指同时发生在两个方向上的一种数据传输方式，如图中(c)所示。电话机就是一种全双工设备，其通话双方可以同时进行对话。计算机之间的高速数据通信也是这种方式。</p><p>双向交替通信又称为半双工通信，即通信的双方都可以发送信息，但不能双方同时发送（当然也就不能同时接收）。这种通信方式是一方发送另一方接收，过一段时间后再反过来。此次要实现的就是半双工通信</p><hr><h2 id="实现TCP半双工通信"><a href="#实现TCP半双工通信" class="headerlink" title="实现TCP半双工通信"></a>实现TCP半双工通信</h2><p><strong>基于TCP协议的socket的server端程序编程步骤：</strong><br>1、建立socket ，使用socket()<br>2、绑定socket ，使用bind()<br>3、打开listening socket,使用listen()<br>4、等待client连接请求，使用accept()<br>5、收到连接请求，确定连接成功后，使用输入，输出函数recv(),send()与client端互传信息<br>6、关闭socket,使用close()</p><p><strong>基于TCP协议的socket的Client程序编程步骤：</strong><br>1、建立socket，使用socket()<br>2、通知server请求连接，使用connect()<br>3、若连接成功，就使用输入输出函数recv(),send()与server互传信息<br>4、关闭socket，使用close()</p><h3 id="所用到的结构体与函数"><a href="#所用到的结构体与函数" class="headerlink" title="所用到的结构体与函数"></a>所用到的结构体与函数</h3><p>1.IPV4套接字地址结构体：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> sockaddr_in<span class="token punctuation">{</span>    uint8_t             sin_len<span class="token punctuation">;</span>    sa_famliy_t         sin_fanliy<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*协议家族*/</span>    in_port_t           sin_port<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*端口号*/</span>    <span class="token keyword">struct</span> in_addr      sin_addr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*IP地址，struct in_addr{in_addr_t s_addr;}*/</span>    <span class="token keyword">char</span>                sin_zero<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.通用套接字地址结构体：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> sockaddr<span class="token punctuation">{</span>    uint8_t       sa_len<span class="token punctuation">;</span>    sa_famliy     sa_famliy<span class="token punctuation">;</span>    <span class="token keyword">char</span>          sa_data<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.socket()：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">socket</span><span class="token punctuation">(</span><span class="token keyword">int</span> domain<span class="token punctuation">,</span><span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> protocol<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*创建一个套接字：返回值：    创建成功返回一个文件描述符（0,1,2已被stdin、stdout、stderr占用，所以从3开始）    失败返回-1。参数：    domain为协议家族，TCP属于AF_INET（IPV4）；    type为协议类型，TCP属于SOCK_STREAM（流式套接字）；    最后一个参数为具体的协议（IPPOOTO_TCP为TCP协议，前两个已经能确定该参数是TCP，所以也可以填0）*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.bind()：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">struct</span> sockaddr <span class="token operator">*</span> addr<span class="token punctuation">,</span>socklen_t addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*将创建的套接字与地址端口等绑定返回值：成功返回0，失败返回-1.参数：    sockfd为socket函数返回接受的文件描述符，    addr为新建的IPV4套接字结构体    注意：定义若是使用struct sockaddr_in（IPV4结构体）定义，但是该参数需要将struct sockaddr_in *类型地址强转为struct sockaddr *类型（struct sockaddr是通用类型）。    最后一个参数为该结构体所占字节数。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.listen()：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span><span class="token keyword">int</span> backlog<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*对创建的套接字进行监听，监听有无客户请求连接返回值：有客户请求连接时，返回从已完成连接的队列中第一个连接（即完成了TCP三次握手的的所有连接组成的队列），否则处于阻塞状态（blocking）。参数：sockfd依然为socket函数返回的文件描述符；blocklog为设定的监听队列的长度。可设为5、10等值但是不能大于SOMAXCONN（监听队列最大长度）*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.connect()和accept()：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">struct</span> sockaddr <span class="token operator">*</span> addr<span class="token punctuation">,</span>socklen_t addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*客户端请求连接返回值：成功返回0，失败返回-1参数：客户端的socket文件描述符，客户端的socket结构体地址以及结构体变量长度*/</span><span class="token keyword">int</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span><span class="token keyword">struct</span> sockaddr <span class="token operator">*</span> addr<span class="token punctuation">,</span>socklen_t <span class="token operator">*</span> addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*从监听队列中接收已完成连接的第一个连接返回值：成功返回0，失败返回-1参数：服务器socket未见描述符，服务器的socket结构体地址以及结构体变量长度*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7.send()和recv()：</p><pre class="line-numbers language-c"><code class="language-c">ssize_t <span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span>size_t len<span class="token punctuation">,</span><span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*发送数据返回值：成功返回发送的字符数，失败返回-1参数：buf为写缓冲区（send_buf），len为发送缓冲区的大小，flags为一个标志，如MSG_OOB表示有紧急带外数据等*/</span>ssize_t <span class="token function">recv</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> size_t len<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*接收数据返回值参数与send函数相似不过send是将buf中的数据向外发送，而recv是将接收到的数据写到buf缓冲区中。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8.close()：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*关闭套接字，类似于fclose，fd为要关闭的套接字文件描述符失败返回-1，成功返回0*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><p>服务端：</p><blockquote><p>tcp_server.c</p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*接收IP地址和端口号*/</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> sid <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>SOCK_STREAM<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建socket,第一个参数使用IPv4协议，第二个参数使用流的方式传播，第三个参数默认为0</span>    <span class="token keyword">struct</span> sockaddr_in addr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//定义ip地址</span>    addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//声明协议用的是IPv4</span>    addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//绑定到哪一个端口号当中,从第三个参数中获取</span>    addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//监听哪一个ip地址,从第二个参数中获取</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>sid<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>addr<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//进行绑定,第二个参数为绑定的地址和端口号</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"bind res = %d\n"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//绑定成功输出0,失败则输出-1</span>    <span class="token function">listen</span><span class="token punctuation">(</span>sid<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//进行监听,第一个参数是监听哪一个socket,第二个是能接受的最大的连接数</span>    <span class="token keyword">char</span> read_buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//储存客户端发来的信息</span>    <span class="token keyword">char</span> write_buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//储存服务端发送的信息</span>    <span class="token keyword">int</span> len<span class="token punctuation">,</span>cid<span class="token punctuation">;</span>    cid <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>sid<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回客户端的描述符,通过cid可以跟客户端通信</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">bzero</span><span class="token punctuation">(</span>read_buf<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>read_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//置字节字符串的前n个字节为零，达到清空之前的信息的目的</span>        <span class="token function">bzero</span><span class="token punctuation">(</span>read_buf<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>write_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">read</span><span class="token punctuation">(</span>cid<span class="token punctuation">,</span>read_buf<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>read_buf<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>read_buf<span class="token punctuation">,</span><span class="token string">"quit\n"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果收到的信息为quit便结束通信</span>        <span class="token punctuation">{</span>           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"client quit the communication!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"client:%s"</span><span class="token punctuation">,</span>read_buf<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出客户端发送的信息</span>           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"server:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">fgets</span><span class="token punctuation">(</span>write_buf<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>write_buf<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">write</span><span class="token punctuation">(</span>cid<span class="token punctuation">,</span>write_buf<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>write_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>write_buf<span class="token punctuation">,</span><span class="token string">"quit\n"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//发出信息quit，结束本次通信</span>        <span class="token punctuation">{</span>           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sever quit the communication!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">close</span><span class="token punctuation">(</span>cid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端：</p><blockquote><p>tcp_client.c</p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*接收IP地址和端口号*/</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//参数必须为三个</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"param must >= 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> cid <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>SOCK_STREAM<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">struct</span> sockaddr_in saddr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存放要连接的服务器的ip地址和端口号</span>    saddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    saddr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    saddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>cid<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>saddr<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//跟服务器连接,成功返回0，失败返回-1</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"connect res = %d\n"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> read_buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//储存客户端发来的信息</span>    <span class="token keyword">char</span> write_buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//储存服务端发送的信息</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">bzero</span><span class="token punctuation">(</span>read_buf<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>read_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//置字节字符串的前n个字节为零，达到清空之前的信息的目的</span>        <span class="token function">bzero</span><span class="token punctuation">(</span>write_buf<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>write_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"client:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fgets</span><span class="token punctuation">(</span>write_buf<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>write_buf<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">send</span><span class="token punctuation">(</span>cid<span class="token punctuation">,</span>write_buf<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>write_buf<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>write_buf<span class="token punctuation">,</span><span class="token string">"quit\n"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果发送的信息为quit便结束本次通信  </span>        <span class="token punctuation">{</span>           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"client quit the communication!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">recv</span><span class="token punctuation">(</span>cid<span class="token punctuation">,</span>read_buf<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>read_buf<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>read_buf<span class="token punctuation">,</span><span class="token string">"quit\n"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果收到的信息为quit便结束通信</span>        <span class="token punctuation">{</span>           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sever quit the communication!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"server:%s"</span><span class="token punctuation">,</span>read_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出客户端发送的信息</span>    <span class="token punctuation">}</span>    <span class="token function">close</span><span class="token punctuation">(</span>cid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>127.0.0.1是回送地址，指本地机，一般用来测试使用。回送地址（127.x.x.x）是本机回送地址（Loopback Address），即主机IP堆栈内部的IP地址，主要用于网络软件测试以及本地机进程间通信，无论什么程序，一旦使用回送地址发送数据，协议软件立即返回，不进行任何网络传输。</p><p>在Windows系统中，这个地址有一个别名“Localhost”。寻址这样一个地址，是不能发到网络接口的。除非出错，否则在传输介质上永远不应该出现目的地址为“127.0.0.1”的数据包。</p><p><strong>运行程序需要打开Linux中打开两个终端,分别编译运行服务端和客户端的源文件,IP地址选择本地地址,端口号建议选择8000以上比较稳定比如9999,首先客户端发送信息到服务端,服务端在接收到客户端的信息后才可以回复,双方都可以输出quit来结束本次通信</strong></p><p>客户端：</p><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20200422175007901.png?" alt=""></p><p>服务端：<br><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20200422175105211.png" alt=""></p><h2 id="实现UDP半双工通信"><a href="#实现UDP半双工通信" class="headerlink" title="实现UDP半双工通信"></a>实现UDP半双工通信</h2><p><strong>基于UDP协议的socket的接收端编程步骤：</strong><br>1、建立socket,使用socket()<br>2、绑定socket,使用bind()<br>3、以recvfrom()函数接收发送端传来的数据<br>4、关闭socket，使用close()</p><p><strong>基于UDP协议的socket的发送端编程步骤：</strong><br>1、建立Socket，使socket()<br>2、用sendto()函数向接收端发送数据。<br>3、关闭socket，使用close()函数</p><h3 id="源代码-1"><a href="#源代码-1" class="headerlink" title="源代码"></a>源代码</h3><p>接收端：</p><blockquote><p>udp_recvpp.c</p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"param must >= 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> cid <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>SOCK_DGRAM<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"socket error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">struct</span> sockaddr_in addr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>sendaddr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>cid<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>addr<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"bind res = %d\n"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> read_buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> write_buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">bzero</span><span class="token punctuation">(</span>read_buf<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>read_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">bzero</span><span class="token punctuation">(</span>write_buf<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>write_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">recvfrom</span><span class="token punctuation">(</span>cid<span class="token punctuation">,</span>read_buf<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>read_buf<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>sendaddr<span class="token punctuation">,</span><span class="token operator">&amp;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>read_buf<span class="token punctuation">,</span><span class="token string">"quit\n"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"send quit the communication!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">char</span> ipbuf<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">inet_ntop</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span><span class="token operator">&amp;</span>sendaddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">,</span>ipbuf<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ipbuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"send:%s"</span><span class="token punctuation">,</span>read_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"send addr: ip = %s,port = %d\n"</span><span class="token punctuation">,</span>ipbuf<span class="token punctuation">,</span><span class="token function">ntohs</span><span class="token punctuation">(</span>sendaddr<span class="token punctuation">.</span>sin_port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fgets</span><span class="token punctuation">(</span>write_buf<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>write_buf<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sendto</span><span class="token punctuation">(</span>cid<span class="token punctuation">,</span>write_buf<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>write_buf<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>sendaddr<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>write_buf<span class="token punctuation">,</span><span class="token string">"quit\n"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"you quit the communication!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">close</span><span class="token punctuation">(</span>cid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发送端：</p><blockquote><p>udp_sendpp.c</p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"param must >= 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> cid <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>SOCK_DGRAM<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"socket error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">struct</span> sockaddr_in addr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>sendaddr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">char</span> read_buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> write_buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">bzero</span><span class="token punctuation">(</span>read_buf<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>read_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">bzero</span><span class="token punctuation">(</span>write_buf<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>write_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"send:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fgets</span><span class="token punctuation">(</span>write_buf<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>write_buf<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     len <span class="token operator">=</span> <span class="token function">sendto</span><span class="token punctuation">(</span>cid<span class="token punctuation">,</span>write_buf<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>write_buf<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>addr<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"send successful!!send len = %d\n"</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>write_buf<span class="token punctuation">,</span><span class="token string">"quit\n"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"you quit the communication!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">recvfrom</span><span class="token punctuation">(</span>cid<span class="token punctuation">,</span>read_buf<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>read_buf<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>sendaddr<span class="token punctuation">,</span><span class="token operator">&amp;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>read_buf<span class="token punctuation">,</span><span class="token string">"quit\n"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv quit the communication!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv:%s"</span><span class="token punctuation">,</span>read_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">close</span><span class="token punctuation">(</span>cid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><p>发送端：<br><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20200422180906191.png?" alt=""></p><p>接收端：</p><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20200422180929422.png?" alt=""></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/apollon_krj/article/details/53398448" target="_blank" rel="noopener">https://blog.csdn.net/apollon_krj/article/details/53398448</a><br><a href="https://zhuanlan.zhihu.com/p/24860273" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/24860273</a><br><a href="https://www.cnblogs.com/lightice/p/12726717.html" target="_blank" rel="noopener">https://www.cnblogs.com/lightice/p/12726717.html</a></p><hr><hr><p>本文结束,感谢您的阅读！</p>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 半双工通信 </tag>
            
            <tag> C语言 </tag>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法之归并排序</title>
      <link href="/posts/b87d.html"/>
      <url>/posts/b87d.html</url>
      
        <content type="html"><![CDATA[<hr><p>归并排序<br><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20200418003321646.png" alt=""><br>归并：将两个或两个以上的有序表组合成一个新有序表<br>主要的思想:划分，求解子问题，综合解<br>利用递归的分治方法：<br>1、将原序列细分，直到成为单个元素<br>2、在将分割后的序列一层一层地按顺序合并,完成排序。<br>细分通过不断深入递归完成，合并通过递归一层层返回完成</p><p>伪代码：<br><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/2020041800314050.png" alt=""></p><p>算法分析：<br>时间效率：O(nlog2n)<br>空间效率：O(n)<br>稳 定 性：稳定</p><h2 id="C语言实现归并排序"><a href="#C语言实现归并排序" class="headerlink" title="C语言实现归并排序"></a>C语言实现归并排序</h2><p>源代码：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">printArr</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//打印数组</span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">mergesort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入数组的长度："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    arr<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>N<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//生成长度为N的数组</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//把1-100的随机数赋值给数组arr</span>    <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">100</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"排序前：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printArr</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"归并排序后：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">mergesort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>N<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printArr</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">printArr</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//打印数组</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//arr[low]~arr[m] 和 arr[m+1]~arr[high]是两个有序序列</span><span class="token comment" spellcheck="true">//将两个子序列合并为一个总的有序的序列</span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> <span class="token operator">*</span>arr1<span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//arr1为辅助数组</span>        arr1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>N<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">;</span>        i<span class="token operator">=</span>low<span class="token punctuation">;</span>        j<span class="token operator">=</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        k<span class="token operator">=</span>low<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>high<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//对两个有序序列中的记录排序</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            arr1<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>            arr1<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">//如果第一个序列未检测完，将第一个序列后面所有元素加到合并的序列中</span>        arr1<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>high<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">//如果第二个序列未检测完，将第二个序列后面所有元素加到合并的序列中</span>        arr1<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> low<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span>high<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//将排列好的序列复制回原数组</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//释放辅助数组arr1的空间</span>    <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">mergesort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//至少包含两个元素</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> q<span class="token operator">=</span><span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//均分为两份进行合并排序</span>            <span class="token function">mergesort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>left<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//左边的进行合并排序，即left->q，包括i都是左边负责</span>            <span class="token function">mergesort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>q<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//右边的进行合并排序，即q+1->right,包括right都是右边负责排序</span>            <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>left<span class="token punctuation">,</span>q<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//将已排序的两部分合并</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20200418002115393.png" alt=""></p><h2 id="Java实现归并排序"><a href="#Java实现归并排序" class="headerlink" title="Java实现归并排序"></a>Java实现归并排序</h2><p>源代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Gbsort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//声明创建长度为10的一维数组</span>        Random ran<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//生成随机数组并输出</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>ran<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 把范围为1-1000的随机整数复制给a[i]</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 输出a[i]</span>        <span class="token punctuation">}</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mergesort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"归并排序后："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">:</span>a<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//遍历排序后的数组            </span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//arr[low]~arr[m] 和 arr[m+1]~arr[high]是两个有序序列</span>    <span class="token comment" spellcheck="true">//将两个子序列合并为一个总的有序的序列</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span>    <span class="token punctuation">{</span>         <span class="token keyword">int</span> arr1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span> <span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//arr1为辅助数组</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">;</span>        i<span class="token operator">=</span>low<span class="token punctuation">;</span>        j<span class="token operator">=</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        k<span class="token operator">=</span>low<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>high<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//对两个有序序列中的记录排序</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>arr1<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> arr1<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">)</span>arr1<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//如果第一个序列未检测完，将第一个序列后面所有元素加到合并的序列中</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>high<span class="token punctuation">)</span>arr1<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//如果第二个序列未检测完，将第二个序列后面所有元素加到合并的序列中</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> low<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span>high<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//将排列好的序列复制回原数组</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mergesort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//至少包含两个元素</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> q<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token function">mergesort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>l<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">mergesort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>q<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>l<span class="token punctuation">,</span>q<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20200418002439982.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言和Java中生成随机数</title>
      <link href="/posts/a28a.html"/>
      <url>/posts/a28a.html</url>
      
        <content type="html"><![CDATA[<p>在实际编程中，我们经常需要生成随机数，例如，实现排序算法的时候通过生成随机数来测试算法的可行性</p><h2 id="C语言生成随机数"><a href="#C语言生成随机数" class="headerlink" title="C语言生成随机数"></a>C语言生成随机数</h2><p>  在C语言中，我们一般使用 &lt;stdlib.h&gt; 头文件中的 rand() 函数来生成随机数，rand() 会随机生成一个位于 0 ~ RAND_MAX 之间的整数。<br>  RAND_MAX 是 &lt;stdlib.h&gt; 头文件中的一个宏，它用来指明 rand() 所能返回的随机数的最大值。C语言标准并没有规定 RAND_MAX 的具体数值，只是规定它的值至少为 32767。在实际编程中，我们也不需要知道 RAND_MAX 的具体值，把它当做一个很大的数来对待即可。</p><p> <strong>在使用rand()函数前需要一条语句进行随机数初始值的设置 。</strong></p><pre class="line-numbers language-c"><code class="language-c"><span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//如果不加上的话会导致每次生成的随机数一样</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用系统时间进行随机数初始值的设置。函数time()返回以秒计算的当前时间值，该值被转换为无符号整数并用作随机数发生器的种子。作为一个随机数实际上是一个伪随机数，并不是实际意义上的随机，仅仅是通过一定的数学方法（不同的数学方法产生满足不同分布的随机数序列），从一个初始值生成的一个序列，因此这个初始值如果雷同的话，生成的随机数也是相同的。因此在第一次使用rand函数前，需要使用srand函数，我们可以通过 srand() 函数来重新“播种”，这样种子就会发生改变。</p><p><strong>生成随机数需要用到的头文件为：</strong></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span>  </span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;time.h></span>  </span><span class="token comment" spellcheck="true">//time()函数</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span> </span><span class="token comment" spellcheck="true">//srand()函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>下面是一个随机数生成的实例：</strong></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;time.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20200417231605830.png" alt=""><br><strong>生成一定范围内的随机数</strong><br>在实际的编程中，我们往往需要确定随机数的范围，可以利用取模的方法：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">100</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>则a为0-99的随机数</p><p>若要规定上下限，如生成的数的范围为45-87，则代码如下：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">43</span><span class="token operator">+</span><span class="token number">45</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>分析：rand%43生成了0-42的随机数，+45则表示a的最小值为43，最大值为45</p><h2 id="Java生成随机数"><a href="#Java生成随机数" class="headerlink" title="Java生成随机数"></a>Java生成随机数</h2><p>在Java中生成随机数需要使用rand()函数，借助java.util.Random类来产生一个随机数发生器，构造函数有两个，Random()和Random(long seed)。<br>第一个就是以当前时间为默认种子，每次生成不一样的随机数。<br>第二个是以指定的种子值进行，使用第二个构造方法每次产生随机数的值会相同。</p><p><strong>随机数生成实例：</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rand</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//声明创建长度为10的一维数组</span>        Random ran<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//生成随机数组并输出</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>ran<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 把范围为1-1000的随机整数复制给a[i]</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 输出a[i]</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行结果：</strong><br><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20200417234355105.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随机数 </tag>
            
            <tag> 程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux  Shell编程</title>
      <link href="/posts/2be2.html"/>
      <url>/posts/2be2.html</url>
      
        <content type="html"><![CDATA[<h2 id="Shell-编程概述"><a href="#Shell-编程概述" class="headerlink" title="Shell 编程概述"></a>Shell 编程概述</h2><ul><li><p><strong>Shell是系统的用户界面，提供了用户与内核进行交互操作的一种接口</strong><br>它接收用户输入的命令并把它送入内核去执行。实际上Shell是一个命令解释器，它解释由用户输入的命令并且把它们送到内核。不仅如此，Shell有自己的编程语言用于对命令的编辑，它允许用户编写由shell命令组成的程序。Shell编程语言具有普通编程语言的很多特点，比如它也有循环结构和分支控制结构等，用这种编程语言编写的Shell程序与其他应用程序具有同样的效果。</p></li><li><p><strong>Shell最主要的功用都是解译使用者在命令列提示符号下输入的指令</strong><br>Shell 的另一个重要功用是提供个人化的使用者环境，这通常在 shell 的初始化档案中完成（.profile、.login、.cshrc、.tcshrc 等等）。这些档案包括了设定终端机键盘和定义窗口的特征；设定变量，定义搜寻路径、权限、提示符号和终端机类型；以及设定特殊应用程序所需要的变量，例如窗口、文字处理程序、及程序语言的链接库。Shell 也能当解译性的程序语言（interpreted programing language）。Shell 程序，通常叫做命令文件，它由列在档案内的命令所构成。此程序在编辑器中编辑（虽然也可以直接在命令列下写作程序，online scripting），由 UNIX 命令和基本的程序结构，例如变量的指定、测试条件、和循环所构成。</p></li></ul><h2 id="Shell执行步骤"><a href="#Shell执行步骤" class="headerlink" title="Shell执行步骤"></a>Shell执行步骤</h2><p><strong>Shell的编写流程：用编辑器编写Shell脚本文件；赋予文件可执行权限；执行及调试</strong></p><h3 id="Shell的编写使用的编辑器"><a href="#Shell的编写使用的编辑器" class="headerlink" title="Shell的编写使用的编辑器"></a>Shell的编写使用的编辑器</h3><ul><li><strong>使用UNIX提供的gedit编辑器</strong><br>gedit是一个GNOME桌面环境下兼容UTF-8的文本编辑器。它使用GTK+编写而成，因此它十分的简单易用，有良好的语法高亮，对中文支持很好，支持包括gb2312、gbk在内的多种字符编码。gedit是一个自由软件。</li></ul><p>1、启动：<br>从菜单启动：应用程序——&gt;附件——&gt;文本编辑器<br>从命令行执行以下命令： gedit</p><p>2、窗口说明：<br>菜单栏：包含您在 gedit 中处理文件所需的所有命令。<br>工具栏：包含您可以从菜单栏访问的命令的子集。<br>显示区域：该区域包含您正在编辑的文件的文本。<br>输出窗口：显示 Shell 命令插件和比较文件插件返回的输出。<br>状态栏：显示关于当前 gedit 活动的信息和关于菜单项的上下文信息。</p><ul><li><strong>使用vi编辑器</strong></li></ul><p>vi 编辑器是 Linux/UNIX 环境下经典的编辑器。Linux vi 命令非常强大，熟练地使用它可以高效的编辑代码，配置系统文件等，是程序员和运维人员必须掌握的技能。<br>vi编辑器的基本使用方法及语法：<a href="https://www.cnblogs.com/liuzhenguo/p/6627400.html" target="_blank" rel="noopener">传送门</a></p><p><strong>需要注意的是Shell文件的后缀都是.sh，类似于C语言的.c文件</strong></p><h3 id="赋予文件可执行权限"><a href="#赋予文件可执行权限" class="headerlink" title="赋予文件可执行权限"></a>赋予文件可执行权限</h3><p><strong>Linux/Unix 的文件调用权限分为三级 : 文件拥有者、群组、其他。利用 chmod 可以改变文件或目录的读、写、执行的允许权。</strong></p><ul><li><strong>执行格式：        chmod  [-R]  mode  name</strong></li></ul><p><strong>参数说明</strong></p><ul><li><p><strong>[-R]为递归处理,将指定目录下所有文件及子目录一并处理</strong></p></li><li><p><strong>mode为权限设定字串，格式如下 :</strong></p></li></ul><pre><code>[ugoa...][[+-=][rwxX]...][,...]</code></pre><p><strong>其中：</strong></p><ul><li><p>u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。</p></li><li><p>+表示增加权限、- 表示取消权限、= 表示唯一设定权限。</p></li><li><p>r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该文件是个子目录或者该文件已经被设定过为可执行。</p></li></ul><p><strong>其他参数说明：</strong></p><ul><li>c : 若该文件权限确实已经更改，才显示其更改动作</li><li>f : 若该文件权限无法被更改也不要显示错误讯息</li><li>v : 显示权限变更的详细资料</li><li>R : 对目前目录下的所有文件与子目录进行相同的权限变更(即以递回的方式逐个变更)</li><li>help : 显示辅助说明</li></ul><p><strong>实例</strong></p><ul><li>将文件 file1.txt 设为所有人皆可读取 :</li></ul><pre><code>chmod ugo+r file1.txt</code></pre><p>或者</p><pre><code>chmod a+r file1.txt</code></pre><p>-将文件 file1.txt 与 file2.txt 设为该文件拥有者，与其所属同一个群体者可写入，但其他以外的人则不可写入 :</p><pre><code>chmod ug+w,o-w file1.txt file2.txt</code></pre><ul><li>将目前目录下的所有文件与子目录皆设为任何人可读取 :</li></ul><pre><code>chmod -R a+r *</code></pre><h3 id="执行及调试"><a href="#执行及调试" class="headerlink" title="执行及调试"></a>执行及调试</h3><h4 id="shell程序执行方式"><a href="#shell程序执行方式" class="headerlink" title="shell程序执行方式"></a>shell程序执行方式</h4><p>假设有一个脚本script.sh 使用BASH shell<br>1.使用./script.sh<br>2.使用bash script.sh 或者sh script.sh<br>3.使用. script.sh<br><strong>注意！.是一个命令，后面要有空格(source命令也称为“点命令”，也就是一个点符号（.）,是bash的内部命令)</strong><br>以上三种执行方式的具体区别：<a href="https://blog.csdn.net/liwzhuo/article/details/79725071" target="_blank" rel="noopener">传送门</a></p><h4 id="Shell调试"><a href="#Shell调试" class="headerlink" title="Shell调试"></a>Shell调试</h4><p><strong>Shell调试的具体方法：</strong> <a href="https://www.cnblogs.com/CherishFX/p/4558958.html" target="_blank" rel="noopener">传送门</a></p><h2 id="Shell基本语法"><a href="#Shell基本语法" class="headerlink" title="Shell基本语法"></a>Shell基本语法</h2><h3 id="Shell程序开头"><a href="#Shell程序开头" class="headerlink" title="Shell程序开头"></a>Shell程序开头</h3><p><strong>在Shell程序的开头要加上#!/bin/bash</strong><br>意思是指此脚本使用/bin/bash来解释执行就是用bin目录下的bash来进行解析<br>其中，#!是一个特殊的表示符，其后，跟着解释此脚本的shell路径。<br>当然,bash只是shell的一种，还有很多其它shell，如：sh,csh,ksh,tcsh…</p><h3 id="Shell常用关键字"><a href="#Shell常用关键字" class="headerlink" title="Shell常用关键字"></a>Shell常用关键字</h3><p>1、echo：打印文字到屏幕<br>2、exec：执行另一个Shell脚本<br>3、read：读标准输入<br>4、expr：对整数型变量进行算术运算<br>5、test：用于测试变量是否相等、 是否为空、文件类型等<br>6、exit：退出</p><p><strong>需要特别注意的是,在Shell中的比较字符跟我们经常接触的C语言，Java有些不一样的地方,如下所示</strong><br>-eq 等于<br>-ne 不等于<br>-gt 大于<br>-lt 小于<br>-le 小于等于<br>-ge 大于等于<br>-z 空串<br>= 两个字符相等<br>!= 两个字符不等<br>-n 非空串</p><p><strong>意思就是在Shell中用 -gt 表示大于关系,用  -lt  表示小于关系,而不能直接用&gt;,&lt;号表示</strong></p><h3 id="Shell注释"><a href="#Shell注释" class="headerlink" title="Shell注释"></a>Shell注释</h3><p><strong>在Shell中用符号#进行注释</strong></p><h3 id="Shell变量"><a href="#Shell变量" class="headerlink" title="Shell变量"></a>Shell变量</h3><p>Shell变量分为用户自定义、预定义和环境变量三种。一般以一下方式定义变量：“变量名=变量值”<br>例如：</p><pre><code>INPUT=5</code></pre><p><strong>需要注意的是 :</strong><br><strong>变量名一般大写，且等号两边不能空格，变量调用使用“$变量名”实现</strong></p><p><strong>1、用户自定义变量</strong><br>    这种变量只支持字符串类型，不支持其他字符、浮点等类型，常见有以下3个前缀：<br>（1）unset：删除变量<br>（2）readonly：标记只读变量<br> （3）export：指定全局变量</p><p><strong>2、预定义变量</strong><br>    预定义变量用来获取命令行的输入，常用的有：<br>（1）$0 ：脚本文件名<br>（2）$1-9 ：第 1-9 个命令行参数名<br>（3）$# ：命令行参数个数<br>（4）$@ ：所有命令行参数<br>（5）$* ：所有命令行参数<br>（6）$? ：前一个命令的退出状态，可用于获取函数返回值<br>（7）$$ ：执行的进程 ID<br>例如：实现编写shell脚本 ex2.sh，能将命令行参数相加并输出，如:<br>./ex2.sh 1 3 8输出结果为12<br>代码如下：</p><pre><code>#!/bin/bashsum=0for i in $@do     sum=$[$sum+$i]doneecho &quot;sum = $sum&quot;</code></pre><p>运行结果：<br><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20200412121129926.png?" alt=""></p><p><strong>3、环境变量</strong><br>    环境变量默认存在，一般包含下面几个：<br>    （1）HOME：用户主目录<br>（2）PATH：系统环境变量 PATH<br>（3）TERM：当前终端<br>（4）UID：当前用户 ID<br>（5）PWD：当前工作目录，绝对路径</p><h3 id="Shell运算"><a href="#Shell运算" class="headerlink" title="Shell运算"></a>Shell运算</h3><p>Shell比较常见的运算包括以下4中，功能都是将m+1：</p><ol><li><code>m=$[ m + 1 ]</code></li><li><code>m=` expr  $m + 1 `</code><strong>用``字符包括起来 ,需要注意的是加号两边要有空格</strong></li><li><code>let m=m+1</code></li><li><code>m=$(( m + 1 ))</code></li></ol><h3 id="Shell语句"><a href="#Shell语句" class="headerlink" title="Shell语句"></a>Shell语句</h3><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><p><strong>Shell编程中if语句与C语言类似，用于程序分支，也可构成分支嵌套形式，但是在Shell中的if语句的语法和C语言有所区别,在if  和 else if后要加上then,在if语句结尾必须要加上fi作为结束的标志</strong><br><strong>例如：</strong></p><pre><code>INPUT=10if test $INPUT -eq 10then  echo &quot;hello&quot;  else    echo &quot;Shell&quot;    fi</code></pre><h4 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h4><p><strong>case语句相当于C语言中的switch,所以当然case语句也可以用if语句来实现，case语句格式较复杂，请注意使用细节</strong><br><strong>例如：</strong></p><pre><code>#!/bin/bashread NAME                      #类似于scanfcase $NAME in     &quot;Linux&quot;)     echo &quot;Linux&quot;     ;;      &quot;hello&quot;)     echo &quot;hello&quot;     ;;        *)                     #跟switch中的default类似     echo &quot;other&quot;     ;;     esac                         #case语句结束标志</code></pre><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><p><strong>Shell编程中for语句与C语言类似，用于程序循环，也可构成循环嵌套形</strong></p><p><strong>for循环语句格式</strong><br><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20200412132359832.png?" alt=""><br><strong>Shell中的for循环要在执行语句的前面加上do，在执行语句后加上done</strong><br>另外在Shell中break,continue的用法和在C语言中的用法一致</p><h4 id="Shell数组"><a href="#Shell数组" class="headerlink" title="Shell数组"></a>Shell数组</h4><p>和其他编程语言一样，Shell 也支持数组。数组（Array）是若干数据的集合，其中的每一份数据都称为元素（Element）。<br>Shell 并且没有限制数组的大小，理论上可以存放无限量的数据。和 C++、Java、C# 等类似，Shell 数组元素的下标也是从 0 开始计数。<br>获取数组中的元素要使用下标[ ]，下标可以是一个整数，也可以是一个结果为整数的表达式；当然，下标必须大于等于 0。<br>遗憾的是，常用的 Bash Shell 只支持一维数组，不支持多维数组。</p><p><strong>Shell数组的具体定义和使用方法：</strong><a href="http://c.biancheng.net/view/810.html" target="_blank" rel="noopener">传送门</a></p><h2 id="用vi编辑器编写第一个Shell程序"><a href="#用vi编辑器编写第一个Shell程序" class="headerlink" title="用vi编辑器编写第一个Shell程序"></a>用vi编辑器编写第一个Shell程序</h2><ul><li>首先在Linux终端用vi生成.sh文件</li></ul><pre><code>vi  hello.sh</code></pre><ul><li>输出hello Shell!</li></ul><pre><code>#!/bin/bashecho &quot;hello Shell!&quot;</code></pre><ul><li>赋予hello.sh可执行权限</li></ul><pre><code>chmod a+x hello.sh</code></pre><ul><li>运行hello.sh</li></ul><pre><code>./hello.sh           #注意./后面和文件名之间不能有空格</code></pre><ul><li><strong>运行结果</strong>：<br><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20200412134545554.png" alt=""></li></ul><hr><hr><hr><h2 id="文章参考来源"><a href="#文章参考来源" class="headerlink" title="文章参考来源"></a>文章参考来源</h2><ul><li><a href="https://www.runoob.com/linux/linux-comm-chmod.html" target="_blank" rel="noopener">Linux chmod命令</a></li><li><a href="https://www.cnblogs.com/liuzhenguo/p/6627400.html" target="_blank" rel="noopener">shell入门必备基础之vi(vim)编辑器的使用</a></li><li><a href="https://blog.csdn.net/liwzhuo/article/details/79725071" target="_blank" rel="noopener">shell程序执行方式</a></li><li><a href="https://www.cnblogs.com/CherishFX/p/4558958.html" target="_blank" rel="noopener">Linux Shell 程序调试</a></li><li><a href="http://c.biancheng.net/view/810.html" target="_blank" rel="noopener">Shell数组</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>赤途-隐形守护者前作</title>
      <link href="/posts/8006.html"/>
      <url>/posts/8006.html</url>
      
        <content type="html"><![CDATA[<p>分享一个之前在隐形守护者大火的时候找到的资源</p><p><strong>游戏简介</strong>:《潜伏之赤途》是由fantasia制作的一款文字推理谍战游戏，以抗日战争时期的上海滩为背景。玩家扮演的角色方别是一位潜伏日军情报机关的地下党，进行暗杀、窃取情报等一系列活动。在潜伏的路上，你能走得多远？“搞情报工作的没一个有好下场”，你能否打破这句定言？</p><p><strong>游戏目标</strong><br>推理剧情做出选择，避免死亡，打出Happy Ending！</p><h2 id="游戏链接："><a href="#游戏链接：" class="headerlink" title="游戏链接："></a>游戏链接：</h2><p><a href="https://ssz66666.github.io/qfzct-66rpg/" target="_blank" rel="noopener"><strong>赤途</strong></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 隐形守护者 </tag>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于虚拟机 VMware 下的Ubuntn开机黑屏问题</title>
      <link href="/posts/c971.html"/>
      <url>/posts/c971.html</url>
      
        <content type="html"><![CDATA[<hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><strong>在刚开始学习Linux系统的时候，安装配置环境遇到了很多让人心态爆炸的问题，各种bug不断其中一个主要问题就是在装了Ubuntn 12.04.2 -desktop 系统之后，刚安装完第一次开机的时候还好好的，后面关机了再次打开的时候就出现Ubuntn黑屏无法正常启动的问题,等了很久Ubuntn也没有启动，想关掉它却一直会显示虚拟机繁忙根本关不掉，除了重启电脑或者用任务管理器强行虚拟机结束进程一点办法没有，最烦人的是就算你重启或者用任务管理器关掉它之后照样开机还是黑屏，Ubuntn还是依然的打不开</strong>  </li></ul><ul><li><strong>在经历了很长一段时间的折磨和煎熬之后，包括重装了几次虚拟机和Ubuntn,重装虚拟机和Ubuntn的话第一次开机是没问题的，但是关机后再开机还是会出现黑屏，后面还是通过万能的度娘把问题解决了</strong> </li></ul><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul><li><strong>首先，在windows搜索框搜cmd</strong> </li></ul><p><img src="https://img-blog.csdnimg.cn/20200401141039811.png?" alt="\]"><br><strong>然后以管理员身份进行</strong></p><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20200401141422551.png?" alt="在这里插入图片描述"></p><p><strong>输入  net winsock reset</strong>  </p><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20200401141600238.png?" alt=""></p><p><strong>然后重启电脑</strong><br><strong>win+R然后输入msconfig</strong><br><strong>在服务里先把隐藏所有Microsoft 服务打勾，之后<br>再在里面找到所有带VMware 的把勾取消,就是把所有跟vmware相关的服务取消</strong>  </p><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20200401141654876.png?" alt=""><br><strong>点击应用（一定要点），确定，然后重启电脑<br>重启后打开任务管理器发现所有vmware相关进程都没有启动</strong><br><strong>再次win+R打开msconfig,选中所有vmware相关服务,点击应用,启用vmware的服务,再次重启电脑<br>然后打开Ubuntn不会发生黑屏问题了，问题得以解决，通过这个方法过了一周到现在Ubuntn也没有再也发生过黑屏</strong>     </p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程与线程</title>
      <link href="/posts/275f.html"/>
      <url>/posts/275f.html</url>
      
        <content type="html"><![CDATA[<ul><li><h1 id="进程与线程———我的第一篇博客"><a href="#进程与线程———我的第一篇博客" class="headerlink" title="进程与线程———我的第一篇博客"></a><strong>进程与线程———我的第一篇博客</strong></h1></li><li><strong>没有进程就没有线程，就像没有操作系统就没有进程一样。尽管线程不是进程，但在许多方面，它非常类似进程，线程是运行在进程中的小程序</strong><a id="more"></a></li><li><strong>程序是一段静态的代码，它是应用程序执行的蓝本。进程是程序的一次动态执行过程，它对应了从代码加载，执行至执行完毕的一个过程，这个过程也是进程本身从产生，发展，至消亡的过程。现在的操作系统可以管理一个计算机系统中的多个进程，即可以让计算机系统中的多个进程轮流使用CPU资源</strong></li><li><strong>线程的行为很像进程，线程是比进程更小的执行单位，一个进程在执行过程中可以产生多个线程，形成多条执行线索。线程可以共享进程中的某些内存单元，并利用这些内存单元进行数据交换实时通信与必要的操作，但与进程不同的是，线程的中断和恢复可以更加节省系统的开销。具有多个线程的进程能更好的表达和解决现实世界中的具体问题，多进程是计算机应用开发和程序设计的一项重要的实用技术</strong></li></ul><ul><li><strong>每个Java应用程序都有一个默认的主线程，Java应用程序总是从主类的main方法开始执行。当JVM开始加载代码，发现main方法之后，就会启动一个线程，这个线程被称作主线程，该线程负责执行main方法。在main方法的执行中再创建的线程，就被称为程序中的其它线程。如果main方法中没有创建其它的线程，那么当main方法执行完最后一个语句，即当main方法返回时，JVM就会结束Java应用程序。如果main方法又创建了其它线程，那么JVM就要在主线程和其它线程之间轮流切换，保证每个线程都有机会使用 CPU资源，main方法即使执行完最后的语句（主线程结束）JVM也不会结束JAVA应用程序，JVM要一直等到Java用应程序中的所有线程都结束之后，才结束Java 应用程序</strong></li></ul><hr><h2 id="github"><a href="#github" class="headerlink" title="github"></a><a href="https://github.com/topking66" target="_blank" rel="noopener">github</a></h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><strong>Java程序设计精编教程</strong></p>]]></content>
      
      
      <categories>
          
          <category> 进程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进程 </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
